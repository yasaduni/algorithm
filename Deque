package sort;

import java.util.LinkedList;
import java.util.Queue;

public class DequeUsingTwoQueues<T> {
    private Queue<T> frontQueue;
    private Queue<T> rearQueue;

    public DequeUsingTwoQueues() {
        frontQueue = new LinkedList<>();
        rearQueue = new LinkedList<>();
    }

    // Add element to the front of the deque
    public void addFront(T element) {
        frontQueue.offer(element);
    }

    // Add element to the rear of the deque
    public void addRear(T element) {
        rearQueue.offer(element);
    }

    // Remove element from the front of the deque
    public T removeFront() {
        if (frontQueue.isEmpty() && rearQueue.isEmpty()) {
            throw new IllegalStateException("Deque is empty");
        }
        if (frontQueue.isEmpty()) {
            moveHalfToFrontQueue();
        }
        return frontQueue.poll();
    }

    // Remove element from the rear of the deque
    public T removeRear() {
        if (frontQueue.isEmpty() && rearQueue.isEmpty()) {
            throw new IllegalStateException("Deque is empty");
        }
        if (rearQueue.isEmpty()) {
            moveHalfToRearQueue();
        }
        return rearQueue.poll();
    }

    // Peek element at the front of the deque
    public T peekFront() {
        if (frontQueue.isEmpty() && rearQueue.isEmpty()) {
            throw new IllegalStateException("Deque is empty");
        }
        if (frontQueue.isEmpty()) {
            moveHalfToFrontQueue();
        }
        return frontQueue.peek();
    }

    // Peek element at the rear of the deque
    public T peekRear() {
        if (frontQueue.isEmpty() && rearQueue.isEmpty()) {
            throw new IllegalStateException("Deque is empty");
        }
        if (rearQueue.isEmpty()) {
            moveHalfToRearQueue();
        }
        return rearQueue.peek();
    }

    // Move half of the elements from rearQueue to frontQueue
    private void moveHalfToFrontQueue() {
        int halfSize = rearQueue.size() / 2;
        while (rearQueue.size() > halfSize) {
            frontQueue.offer(rearQueue.poll());
        }
    }

    // Move half of the elements from frontQueue to rearQueue
    private void moveHalfToRearQueue() {
        int halfSize = frontQueue.size() / 2;
        while (frontQueue.size() > halfSize) {
            rearQueue.offer(frontQueue.poll());
        }
    }

    public boolean isEmpty() {
        return frontQueue.isEmpty() && rearQueue.isEmpty();
    }

    public static void main(String[] args) {
        DequeUsingTwoQueues<Integer> deque = new DequeUsingTwoQueues<>();
        
        deque.addFront(1);
        deque.addFront(2);
        deque.addRear(3);
        deque.addRear(4);

        System.out.println("Front element: " + deque.peekFront()); // Should print 2
        System.out.println("Rear element: " + deque.peekRear());   // Should print 4

        System.out.println("Removed front: " + deque.removeFront()); // Should print 2
        System.out.println("Removed rear: " + deque.removeRear());   // Should print 4

        System.out.println("Front element: " + deque.peekFront()); // Should print 1
        System.out.println("Rear element: " + deque.peekRear());   // Should print 3
    }
}
