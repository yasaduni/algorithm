package sort;

public class CircularQueue {
	
	    private int[] queue;
	    private int front;
	    private int rear;
	    private int size;
	    private int capacity;

	    // Constructor to initialize the queue with a given capacity
	    public CircularQueue(int capacity) {
	        this.capacity = capacity;
	        queue = new int[capacity];
	        front = 0;
	        rear = -1;
	        size = 0;
	    }

	    // Method to add an element to the queue
	    public boolean enqueue(int item) {
	        if (isFull()) {
	            System.out.println("Queue is full");
	            return false;
	        }

	        rear = (rear + 1) % capacity;
	        queue[rear] = item;
	        size++;
	        return true;
	    }

	    // Method to remove an element from the queue
	    public int dequeue() {
	        if (isEmpty()) {
	            System.out.println("Queue is empty");
	            return -1;
	        }

	        int item = queue[front];
	        front = (front + 1) % capacity;
	        size--;
	        return item;
	    }

	    // Method to get the front element without removing it
	    public int peek() {
	        if (isEmpty()) {
	            System.out.println("Queue is empty");
	            return -1;
	        }
	        return queue[front];
	    }

	    // Method to check if the queue is empty
	    public boolean isEmpty() {
	        return size == 0;
	    }

	    // Method to check if the queue is full
	    public boolean isFull() {
	        return size == capacity;
	    }

	    // Method to get the size of the queue
	    public int getSize() {
	        return size;
	    }

	    // Main method for testing the CircularQueue class
	    public static void main(String[] args) {
	        CircularQueue queue = new CircularQueue(5);

	        queue.enqueue(1);
	        queue.enqueue(2);
	        queue.enqueue(3);
	        queue.enqueue(4);
	        queue.enqueue(5);

	        System.out.println("Front element is: " + queue.peek());

	        queue.dequeue();
	        queue.dequeue();

	        queue.enqueue(6);
	        queue.enqueue(7);

	        while (!queue.isEmpty()) {
	            System.out.println("Dequeued: " + queue.dequeue());
	        }
	    }
	}

